{"/home/travis/build/npmtest/node-npmtest-checkit/test.js":"/* istanbul instrument in package npmtest_checkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-checkit/lib.npmtest_checkit.js":"/* istanbul instrument in package npmtest_checkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_checkit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_checkit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-checkit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-checkit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_checkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_checkit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_checkit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_checkit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_checkit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_checkit.__dirname + '/lib.npmtest_checkit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/index.js":"var _ = require('./lodash-requires')\nmodule.exports = require('./core')(_, global.Promise)\n","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/lodash-requires.js":"/*\n * This file is to help reduce the size for the browser case and memory\n * usage in both browser and Node\n */\n\nmodule.exports = {\n  clone: require('lodash/clone'),\n  cloneDeep: require('lodash/cloneDeep'),\n  each: require('lodash/each'),\n  extend: require('lodash/extend'),\n  filter: require('lodash/filter'),\n  find: require('lodash/find'),\n  forEach: require('lodash/forEach'),\n  has: require('lodash/has'),\n  head: require('lodash/head'),\n  includes: require('lodash/includes'),\n  indexOf: require('lodash/indexOf'),\n  initial: require('lodash/initial'),\n  invert: require('lodash/invert'),\n  invokeMap: require('lodash/invokeMap'),\n  isArguments: require('lodash/isArguments'),\n  isArray: require('lodash/isArray'),\n  isBoolean: require('lodash/isBoolean'),\n  isEmpty: require('lodash/isEmpty'),\n  isEqual: require('lodash/isEqual'),\n  isFunction: require('lodash/isFunction'),\n  isNaN: require('lodash/isNaN'),\n  isNumber: require('lodash/isNumber'),\n  isObject: require('lodash/isObject'),\n  isPlainObject: require('lodash/isPlainObject'),\n  isString: require('lodash/isString'),\n  keys: require('lodash/keys'),\n  last: require('lodash/last'),\n  map: require('lodash/map'),\n  omit: require('lodash/omit'),\n  pick: require('lodash/pick'),\n  reduce: require('lodash/reduce'),\n  reduceRight: require('lodash/reduceRight'),\n  reject: require('lodash/reject'),\n  shuffle: require('lodash/shuffle'),\n  size: require('lodash/size'),\n  tail: require('lodash/tail'),\n  toArray: require('lodash/toArray'),\n  toPairs: require('lodash/toPairs'),\n  transform: require('lodash/transform'),\n  values: require('lodash/values')\n}\n","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/core.js":"//     Checkit.js 0.6.0\n//     http://tgriesser.com/checkit\n//     (c) 2013-2015 Tim Griesser\n//     Checkit may be freely distributed under the MIT license.\nmodule.exports = function(_, Promise) {\n\nvar inherits = require('inherits')\n\n// The top level `Checkit` constructor, accepting the\n// `validations` to be run and any additional `options`.\nfunction Checkit(validations, options) {\n  if (!(this instanceof Checkit)) {\n    return new Checkit(validations, options);\n  }\n  this.conditional    = [];\n  options             = _.clone(options || {});\n  this.labels         = options.labels   || {};\n  this.messages       = options.messages || {};\n  this.language       = Checkit.i18n[options.language || Checkit.language] || {};\n  this.labelTransform = options.labelTransform || Checkit.labelTransform\n  this.validations    = prepValidations(validations || {});\n}\n\nCheckit.VERSION = '0.6.0';\n\n// Possibly run a validations on this object, depending on the\n// result of the `conditional` handler.\nCheckit.prototype.maybe = function(validations, conditional) {\n  this.conditional.push([prepValidations(validations), conditional]);\n  return this;\n}\n\n// Asynchronously runs a validation block, returning a promise\n// which resolves with the validated object items, or is rejected\n// with a `Checkit.Error`\nCheckit.prototype.run =\nCheckit.prototype.validate = function(target, context) {\n  return new Runner(this, target, context).run();\n}\n\n// Synchronously runs a validation block, returning an object of all fields\n// validated, or throwing a `Checkit.Error` object.\nCheckit.prototype.runSync =\nCheckit.prototype.validateSync = function(target, context) {\n  try  {\n    return [null, new SyncRunner(this, target, context).run()]\n  } catch (err) {\n    return [err, null]\n  }\n}\n\nCheckit.prototype.getMessage = function(item, key) {\n  var language = this.language;\n  var label    = item.label   || this.labels[key] || language.labels[key] || this.labelTransform(key);\n  var message  = item.message || this.messages[item.rule] || language.messages[item.rule] || language.messages.fallback;\n  message = message.replace(labelRegex, label);\n  for (var i = 0, l = item.params.length; i < l; i++) {\n    message = message.replace(varRegex(i+1), item.params[i]);\n  }\n  return message;\n}\n\n// Used to transform the label before using it, can be\n// set globally or in the `options` for the Checkit object.\nCheckit.labelTransform = function(label) {\n  return label;\n}\n\n// Object containing languages for the validations... Feel free to\n// add anything to this object.\nCheckit.i18n = {\n  en: require('./lang/en'),\n  es: require('./lang/es'),\n  ru: require('./lang/ru'),\n  fr: require('./lang/fr')\n}\n\n// The default language for all validations, defaults to \"en\" which\n// is included with the library by default. To add additional languages,\n// add them to the `Checkit.i18n` object.\nCheckit.language = 'en';\n\n// Runs validation on an individual rule & value, for convenience.\n// e.g. `Checkit.check('email', 'foo@domain', 'email').then(...`\nCheckit.check = function(key, value, rules, sync) {\n  var input = {}, validations = {};\n  input[key] = value;\n  validations[key] = rules;\n  if (sync) {\n    return checkSync(validations, input, key)\n  } else {\n    return new Checkit(validations).run(input).then(null, function(err) {\n      if (err instanceof CheckitError) throw err.get(key);\n      throw err\n    })\n  }\n}\nCheckit.checkSync = function(key, value, rules) {\n  return Checkit.check(key, value, rules, true)\n}\n\n// Synchronously check an individual field against a rule.\nfunction checkSync(validations, input, key) {\n  var arr = new Checkit(validations).runSync(input);\n  if (arr[0] === null) return arr;\n  if (arr[0] instanceof CheckitError) {\n    return [arr[0].get(key), null]\n  }\n  return arr;\n}\n\n// The validator is the object which is dispatched with the `run`\n// call from the `checkit.run` method.\nfunction Runner(checkit, target, context) {\n  this.errors         = {};\n  this.checkit        = checkit;\n  this.conditional    = checkit.conditional;\n  this.target         = _.clone(target || {})\n  this.context        = _.clone(context || {})\n  this.validator      = new Validator(this.target, checkit.language)\n}\n\n// Runs the validations on a specified \"target\".\nRunner.prototype.run = function(target, context) {\n  var runner  = this;\n  var target  = this.target\n  var context = this.context\n\n  var validationHash = _.clone(this.checkit.validations);\n  var errors         = {}\n\n  var pendingConditionals = _.map(this.conditional, function(conditional) {\n    return Promise.resolve(checkConditional(runner, conditional))\n      .then(function(result) {\n        if (result !== true) return;\n        addVerifiedConditional(validationHash, conditional)\n      })\n      .catch(function() {})\n  })\n\n  return Promise.all(pendingConditionals)\n    .then(function() {\n      var pending = []\n      _.each(validationHash, function(validations, key) {\n        _.each(validations, function(validation) {\n          pending.push(processItemAsync(runner, validation, key, context).catch(addError(errors, key, validation)))\n        })\n      })\n      return Promise.all(pending)\n    })\n    .then(function() {\n      if (!_.isEmpty(errors)) {\n        var err = new CheckitError(_.keys(errors).length + ' invalid values');\n            err.errors = errors;\n        throw err;\n      }\n      return _.pick(target, _.keys(validationHash));\n    });\n};\n\n// Only if we explicitly return `true` do we go ahead\n// and add the validations to the stack for a particular rule.\nfunction addVerifiedConditional(validations, conditional) {\n  _.each(conditional[0], function(val, key) {\n    validations[key] = validations[key] || [];\n    validations[key] = validations[key].concat(val);\n  })\n}\n\n// Runs through each of the `conditional` validations, and\n// merges them with the other validations if the condition passes;\n// either by returning `true` or a fulfilled promise.\nfunction checkConditional(runner, conditional) {\n  try {\n    return conditional[1].call(runner, runner.target);\n  } catch (e) {}\n}\n\n// Get value corresponding to key containing \".\" from nested object.\n// If key containing \".\" is proper in object (e.g. {\"foo.bar\": 100}) return 100.\nfunction getVal(target, key){\n  var value = _.clone(target), keys;\n  if(value[key]) return value[key];\n  if((keys = key.split('.')).length === 0) return undefined;\n  while(keys.length > 0){\n    value = value[keys.shift()];\n  }\n  return value;\n}\n\nfunction processItem(runner, currentValidation, key, context) {\n  var value   = getVal(runner.target, key);\n  var rule    = currentValidation.rule;\n  var params  = [value].concat(currentValidation.params).concat(context);\n\n  // If the rule isn't an existence / required check, return\n  // true if the value doesn't exist.\n  if (rule !== 'accepted' && rule !== 'exists' && rule !== 'required') {\n    if (value === '' || value == null) return;\n  }\n  var result = runRule(runner.validator, runner, rule, params)\n  if (_.isBoolean(result) && result === false) {\n    throw new ValidationError(runner.checkit.getMessage(currentValidation, key));\n  }\n  return result;\n}\n\n// Processes an individual item in the validation collection for the current\n// validation object. Returns the value from the completed validation, which will\n// be a boolean, or potentially a promise if the current object is an async validation.\nfunction processItemAsync(runner, currentValidation, key, context) {\n  return Promise.resolve(true).then(function() {\n    return processItem(runner, currentValidation, key, context)\n  });\n}\n\nfunction addError(errors, key, validation) {\n  return function(err) {\n    var fieldError = errors[key];\n    if (!fieldError) {\n      fieldError = errors[key] = new FieldError(err.message)\n      fieldError.key = key\n    }\n    err.rule = validation.rule\n    fieldError.errors.push(err);\n  }\n}\n\nfunction runRule(validator, runner, rule, params) {\n  var result;\n  if (_.isFunction(rule)) {\n    result = rule.apply(runner, params);\n  }\n  else if (typeof validator[rule] === 'function') {\n    result = validator[rule].apply(validator, params);\n  }\n  else if (typeof _[rule] === 'function') {\n    result = _[rule].apply(_, params);\n  }\n  else if (Checkit.Regex[rule]) {\n    result = Checkit.Regex[rule].test(params[0]);\n  }\n  else if (typeof _['is' + capitalize(rule)] === 'function') {\n    result = _['is' + capitalize(rule)].apply(_, params);\n  }\n  else {\n    throw new ValidationError('No validation defined for ' + rule);\n  }\n  return result;\n}\n\nfunction SyncRunner() {\n  Runner.apply(this, arguments)\n}\ninherits(SyncRunner, Runner)\n\n// Runs the validations on a specified \"target\".\nSyncRunner.prototype.run = function() {\n  var runner = this;\n  var target = this.target;\n  var context = this.context;\n  var validationHash = _.clone(this.checkit.validations);\n  var errors         = {}\n\n  _.each(this.conditional, function(conditional) {\n    var result = checkConditional(runner, conditional)\n    if (result !== true) return;\n    addVerifiedConditional(validationHash, conditional)\n  })\n\n  _.each(validationHash, function(validations, key) {\n    _.each(validations, function(validation) {\n      try {\n        processItem(runner, validation, key, context)\n      } catch(err) {\n        addError(errors, key, validation)(err)\n      }\n    })\n  })\n\n  if (!_.isEmpty(errors)) {\n    var err = new CheckitError(_.keys(errors).length + ' invalid values');\n        err.errors = errors;\n    throw err;\n  }\n\n  return _.pick(target, _.keys(validationHash));\n}\n\n// Constructor for running the `Validations`.\nfunction Validator(target, language) {\n  this._target = target\n  this._language = language\n}\n\n_.extend(Validator.prototype, {\n\n  // Check if the value is an \"accepted\" value, useful for form submissions.\n  accepted: function(val) {\n    return _.includes(this._language.accepted, val);\n  },\n\n  // The item must be a number between the given `min` and `max` values.\n  between: function(val, min, max) {\n    return (this.greaterThan(val, min) &&\n      this.lessThan(val, max));\n  },\n\n  // The item must be a number equal or larger than the given `min` and\n  // equal or smaller than the given `max` value.\n  range: function(val, min, max) {\n    return (this.greaterThanEqualTo(val, min) &&\n      this.lessThanEqualTo(val, max));\n  },\n\n  // Check that an item contains another item, either a string,\n  // array, or object.\n  contains: function(val, item) {\n    if (_.isString(val)) return val.indexOf(item) !== -1;\n    if (_.isArray(val))  return _.indexOf(val, item) !== -1;\n    if (_.isObject(val)) return _.has(val, item);\n    return false;\n  },\n\n  // The current value should be different than another field in the current\n  // validation object.\n  different: function(val, field) {\n    return !this.matchesField(val, field);\n  },\n\n  // Check if two items are the exact same length\n  exactLength: function(val, length) {\n    return checkInt(length) || val.length === parseInt(length, 10);\n  },\n\n  // Key must not be `undefined`.\n  exists: function(val) {\n    return val !== void 0;\n  },\n\n  // Field is required and not empty (zero does not count as empty).\n  required: function(val) {\n    return (val != null && val !== '' ? true : false);\n  },\n\n  // Matches another named field in the current validation object.\n  matchesField: function(val, field) {\n    return _.isEqual(val, this._target[field]);\n  },\n\n  // Check that an item is a minimum length\n  minLength: function(val, length) {\n    return checkInt(length) || val.length >= length;\n  },\n\n  // Check that an item is less than a length\n  maxLength: function(val, length) {\n    return checkInt(length) || val.length <= length;\n  },\n\n  // Check if one items is greater than another\n  greaterThan: function(val, param) {\n    return checkNumber(val) || checkNumber(param) || parseFloat(val) > parseFloat(param);\n  },\n\n  // Check if one items is greater than or equal to another\n  greaterThanEqualTo: function(val, param) {\n    return checkNumber(val) || checkNumber(param) || parseFloat(val) >= parseFloat(param);\n  },\n\n  // Check if one item is less than another\n  lessThan: function(val, param) {\n    return checkNumber(val) || checkNumber(param) || parseFloat(val) < parseFloat(param);\n  },\n\n  // Check if one item is less than or equal to another\n  lessThanEqualTo: function(val, param) {\n    return checkNumber(val) || checkNumber(param) || parseFloat(val) <= parseFloat(param);\n  },\n\n  // Check if the value is a string\n  string: function(val) {\n    return (typeof val === 'string');\n  },\n\n  // Check if the value is numeric\n  numeric: numeric\n\n})\n\n// Validation helpers & regex\n\nfunction checkInt(val) {\n  if (!val.match(Regex.integer))\n    throw new Error('The validator argument must be a valid integer');\n}\n\nfunction checkNumber(val) {\n  if (!numeric(val))\n    throw new Error('The validator argument must be a valid number');\n}\n\nfunction numeric(val) {\n  return !isNaN(parseFloat(val)) && isFinite(val);\n}\n\n// Standard regular expression validators.\nvar Regex = Checkit.Regex = {\n  alpha: /^[a-z]+$/i,\n  alphaDash: /^[a-z0-9_\\-]+$/i,\n  alphaNumeric: /^[a-z0-9]+$/i,\n  alphaUnderscore: /^[a-z0-9_]+$/i,\n  base64: /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/,\n  email: /^(.+)@(.+)\\.(.+)$/i,\n  integer: /^\\-?[0-9]+$/,\n  ipv4: /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i,\n  ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n  luhn: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n  natural: /^[0-9]+$/i,\n  naturalNonZero: /^[1-9][0-9]*$/i,\n  url: /^((http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)|)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/,\n  uuid: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n};\n\n// Error Types\n// ---------------\n\n\n// An error for an individual \"validation\", where one or more \"validations\"\n// make up a single ruleset. These are grouped together into a `FieldError`.\nfunction ValidationError(message) {\n  this.message = message\n}\nValidationError.prototype = new Error;\nValidationError.prototype.toString = function() {\n  return this.message\n}\n\n// An `Error` object specific to an individual field,\n// useful in the `Checkit.check` method when you're only\n// validating an individual field. It contains an \"errors\"\n// array which keeps track of any falidations\nfunction FieldError(message) {\n  this.message = message\n  this.errors  = []\n}\n\nFieldError.prototype = new Error;\n\n_.extend(FieldError.prototype, {\n\n  // Call `toString` on the current field, which should\n  // turn the error into the format:\n  toString: function(flat) {\n    var errors = flat ? [this.errors[0]] : this.errors;\n    return this.key + ': ' +\n      _.map(errors, 'message').join(', ');\n  },\n\n  // Returns the current error in json format, by calling `toJSON`\n  // on the error, if there is one, otherwise returning the message.\n  toJSON: function() {\n    return this.map(function(err) {\n      if (err.toJSON) return err.toJSON();\n      return err.message;\n    });\n  }\n\n});\n\n// An object that inherits from the `Error` prototype,\n// but contains methods for working with the individual errors\n// created by the failed Checkit validation object.\nfunction CheckitError(message) {\n  this.message = message;\n  this.errors  = {}\n}\n\nCheckitError.prototype = new Error();\n\n_.extend(CheckitError.prototype, {\n\n  get: function(name) {\n    return this.errors[name];\n  },\n\n  // Convert the current error object toString, by stringifying the JSON representation\n  // of the object.\n  toString: function(flat) {\n    return 'Checkit Errors - ' + this.invokeMap('toString', flat).join('; ');\n  },\n\n  // Creates a JSON object of the validations, if `true` is passed - it will\n  // flatten the error into a single value per item.\n  toJSON: function(flat) {\n    return this.transform(function(acc, val, key) {\n      var json = val.toJSON();\n      acc[key] = flat && _.isArray(json) ? json[0] : json\n    }, {});\n  }\n\n});\n\n// Similar to a Backbone.js `Model` or `Collection`, we'll mixin the underscore\n// methods that make sense to act on `CheckitError.errors` or `FieldError.errors`.\nvar objMethods   = ['keys', 'values', 'toPairs', 'invert', 'pick', 'omit'];\nvar arrMethods   = ['head', 'initial', 'tail', 'last'];\nvar shareMethods = ['forEach', 'each', 'map', 'reduce', 'transform', 'reduceRight',\n  'find', 'filter', 'reject', 'invokeMap', 'toArray', 'size', 'shuffle'];\n\n_.each(shareMethods.concat(objMethods), function(method) {\n  CheckitError.prototype[method] = function() {\n    return _[method].apply(_, [this.errors].concat(_.toArray(arguments)));\n  };\n});\n_.each(shareMethods.concat(arrMethods), function(method) {\n  FieldError.prototype[method] = function() {\n    return _[method].apply(_, [this.errors].concat(_.toArray(arguments)));\n  };\n});\n\n// Assorted Helper Items:\n// --------------------------\n\n// Regular expression for matching the `field_name` and `var_n`\nvar labelRegex = /\\{\\{label\\}\\}/g;\nfunction varRegex(i) { return new RegExp('{{var_' + i + '}}', 'g'); }\n\n// Simple capitalize helper.\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n// Preps the validations being sent to the `run` block, to standardize\n// the format and allow for maximum flexibility when passing to the\n// validation blocks.\nfunction prepValidations(validations) {\n  validations = _.cloneDeep(validations);\n  for (var key in validations) {\n    var validation = validations[key];\n    if (!_.isArray(validation)) validations[key] = validation = [validation];\n    for (var i = 0, l = validation.length; i < l; i++) {\n      validation[i] = assembleValidation(validation[i]);\n    }\n  }\n  return validations;\n}\n\n// Turns the current validation item into an object literal,\n// containing the rule, any arguments split from the `:` delimeter\nfunction assembleValidation(validation) {\n  if (!_.isPlainObject(validation)) {\n    validation = {rule: validation, params: []};\n  }\n  if (_.isString(validation.rule)) {\n    var splitRule = validation.rule.split(':');\n    validation.rule = splitRule[0];\n    if (_.isEmpty(validation.params)) {\n      validation.params = _.tail(splitRule);\n    }\n  } else if (!_.isFunction(validation.rule)) {\n    throw new TypeError('Invalid validation');\n  }\n  return validation;\n}\n\nCheckit.FieldError      = FieldError\nCheckit.Error           = CheckitError\nCheckit.ValidationError = ValidationError\nCheckit.Runner          = Runner\nCheckit.SyncRunner      = SyncRunner\nCheckit.Validator       = Validator\n\nreturn Checkit;\n\n}\n","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/lang/en.js":"module.exports = {\n\n  accepted: ['on', 'yes', 1, '1', true, 'true'],\n\n  labels: {},\n\n  messages: {\n\n    // Custom Predicates\n    accepted: 'The {{label}} must be yes, on, true, or 1',\n    email: 'The {{label}} must be a valid email address',\n    exactLength: 'The {{label}} must be exactly {{var_1}} characters long',\n    exists: 'The {{label}} must be defined',\n    required: 'The {{label}} is required',\n    minLength: 'The {{label}} must be at least {{var_1}} characters long',\n    maxLength: 'The {{label}} must not exceed {{var_1}} characters long',\n    lessThan: 'The {{label}} must be a number less than {{var_1}}',\n    lessThanEqualTo: 'The {{label}} must be a number less than or equal to {{var_1}}',\n    greaterThan: 'The {{label}} must be a number greater than {{var_1}}',\n    greaterThanEqualTo: 'The {{label}} must be a number greater than or equal to {{var_1}}',\n    between: 'The {{label}} must be a number between {{var_1}} and {{var_2}}',\n    range: 'The {{label}} must be a number equal or larger than {{var_1}} and equal or smaller than {{var_2}}',\n    contains: 'The {{label}} must contain {{var_1}}',\n    string: 'The {{label}} must be type \"string\"',\n    numeric: 'The {{label}} must be a numeric value',\n    matchesField: 'The {{label}} must exactly match the {{var_1}}',\n    different: 'The {{label}} must be different than the {{var_1}}',\n    isPlainObject: 'The {{label}} must be a plain object',\n\n    // Underscore Predicates\n    date: 'The {{label}} must be a Date',\n    equal: 'The {{label}} does not match {{var_1}}',\n    'boolean': 'The {{label}} must be type \"boolean\"',\n    empty: 'The {{label}} must be empty',\n    array: 'The {{label}} must be an array',\n    'null': 'The {{label}} must be null',\n    'NaN': 'The {{label}} must be NaN',\n    finite: 'The {{label}} must be a finite number',\n    'function': 'The {{label}} must be a function',\n    'arguments': 'The {{label}} must be a javascript \"arguments\" object',\n    regExp: 'The {{label}} must be a javascript RegExp object',\n\n    // Regex specific messages.\n    alpha: 'The {{label}} must only contain alphabetical characters',\n    alphaDash: 'The {{label}} must only contain alpha-numeric characters, underscores, and dashes',\n    alphaNumeric: 'The {{label}} must only contain alpha-numeric characters',\n    alphaUnderscore: 'The {{label}} must only contain alpha-numeric characters, underscores, and dashes',\n    natural: 'The {{label}} must be a positive number',\n    naturalNonZero: 'The {{label}} must be a number greater than zero',\n    integer: 'The {{label}} must be a valid integer',\n    ipv4: 'The {{label}} must be a valid IPv4 string',\n    ipv6: 'The {{label}} must be a valid IPv6 address',\n    base64: 'The {{label}} must be a base64 string',\n    luhn: 'The {{label}} must be a valid credit card number',\n    uuid: 'The {{label}} must be a valid uuid',\n\n    // If there is no validation provided for an item, use this generic line.\n    fallback: 'Validation for {{label}} did not pass'\n  }\n}","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/lang/es.js":"module.exports = {\n\n  accepted: ['on', 'yes', 1, '1', true, 'true', 'si'],\n\n  labels: {},\n\n  messages: {\n    email: '{{label}} debe de ser una dirección válida de correo electrónico',\n    exactLength: '{{label}} debe de ser de exactamente {{var_1}} caracteres',\n    exists: '{{label}} debe de existir',\n    required: '{{label}} es obligatorio',\n    minLength: '{{label}} debe de ser de al menos {{var_1}} caracteres',\n    maxLength: '{{label}} no debe de ser de más de {{var_1}} caracteres',\n    lessThan: '{{label}} debe de ser un número menor que {{var_1}}',\n    lessThanEqualTo: '{{label}} debe de ser un número menor o igual a {{var_1}}',\n    greaterThan: '{{label}} debe de ser un número mayor que {{var_1}}',\n    greaterThanEqualTo: '{{label}} debe de ser un número mayor o igual a {{var_1}}',\n    string: '{{label}} debe de ser de tipo \"string\"',\n    numeric: '{{label}} debe de ser un valor numérico',\n    matchesField: '{{label}} debe de ser exactamente igual a {{var_1}}',\n    different: '{{label}} debe de ser diferente a {{var_1}}',\n\n    // Underscore Predicates\n    date: '{{label}} debe de ser una fecha',\n    equal: '{{label}} no es igual a {{var_1}}',\n    'boolean': '{{label}} debe de ser de tipo \"boolean\"',\n    empty: '{{label}} debe de estar vacío',\n    array: '{{label}} debe de ser un arreglo',\n\n    // Regex specific messages.\n    alpha: '{{label}} debe de estar compuesto únicamente por carácteres alfabéticos',\n    alphaDash: '{{label}} debe de estar compuesto únicamente por caracteres alfanuméricos, guión y guión bajo',\n    alphaNumeric: '{{label}} debe de estar compuesto únicamente por caracteres alfanuméricos',\n    alphaUnderscore: '{{label}} debe de estar compuesto únicamente por caracteres alfanuméricos, guión y guión bajo',\n    natural: '{{label}} debe de ser un número positivo',\n    naturalNonZero: '{{label}} debe de ser un número mayor a cero',\n    ipv4: '{{label}} debe de ser una dirección válida de IPv4',\n    ipv6: '{{label}} debe de ser una dirección válida de IPv6',\n    base64: '{{label}} debe de ser una cadena en base64',\n    luhn: '{{label}} debe de ser un número válido de tarjeta de crédito',\n    uuid: '{{label}} debe de ser un uuid válido',\n\n    // If there is no validation provided for an item, use this generic line.\n    fallback: 'Las validaciones para {{label}} fallaron'\n  }\n\n}","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/lang/ru.js":"module.exports = {\n\n  accepted: ['on', 'yes', 1, '1', true, 'true', 'да'],\n\n  labels: {},\n\n  messages: {\n\n    // Custom Predicates\n    accepted: '{{label}} должно быть да, on, yes, true или 1',\n    email: '{{label}} должно быть валидным email адресом',\n    exactLength: 'Длина {{label}} должна быть {{var_1}} символов',\n    exists: '{{label}} должно быть определено',\n    required: '{{label}} обязательно',\n    minLength: '{{label}} должно быть не короче {{var_1}} символов',\n    maxLength: '{{label}} не должно быть длинее {{var_1}} символов',\n    lessThan: '{{label}} должно быть числом меньше чем {{var_1}}',\n    lessThanEqualTo: '{{label}} должно быть числом, меньше или равным {{var_1}}',\n    greaterThan: '{{label}} должно быть числом, больше чем {{var_1}}',\n    greaterThanEqualTo: '{{label}} должно быть числом, больше или равным {{var_1}}',\n    between: '{{label}} должно быть числом между {{var_1}} и {{var_2}}',\n    range: '{{label}} должно быть числом, не менее {{var_1}} и не более {{var_2}}',\n    contains: '{{label}} должно содержать {{var_1}}',\n    string: '{{label}} должно быть \"string\"',\n    numeric: '{{label}} должно быть числом',\n    matchesField: '{{label}} должно точно совпадать с {{var_1}}',\n    different: '{{label}} должно быть отлично {{var_1}}',\n    isPlainObject: '{{label}} должно быть объектом',\n\n    // Underscore Predicates\n    date: '{{label}} должно быть датой',\n    equal: '{{label}} не совпадает с {{var_1}}',\n    'boolean': '{{label}} должно быть булевым',\n    empty: '{{label}} должно быть пустым',\n    array: '{{label}} должно быть массивом',\n    'null': '{{label}} должно быть \"null\"',\n    'NaN': '{{label}} должно быть \"NaN\"',\n    finite: '{{label}} должно быть числом',\n    'function': '{{label}} должно быть функцией',\n    'arguments': '{{label}} должно быть типа \"arguments\"',\n    regExp: '{{label}} должно быть регулярным выражением',\n\n    // Regex specific messages.\n    alpha: '{{label}} должно включать только алфавитные символы',\n    alphaDash: '{{label}} должно включать только алфавитные символы, нижнее подчеркивание, или тире',\n    alphaNumeric: '{{label}} должно состоять только из цифр',\n    alphaUnderscore: '{{label}} должно включать только алфавитные символы, нижнее подчеркивание, или тире',\n    natural: '{{label}} должно быть положительным числом',\n    naturalNonZero: '{{label}} должно быть числом больше нуля',\n    ipv4: '{{label}} должно быть валидным IPv4 адресом',\n    ipv6: '{{label}} должно быть валидным IPv6 адресом',\n    base64: '{{label}} должно быть валидной base64 строкой',\n    luhn: '{{label}} должно быть валидным номером кредитной карты',\n    uuid: '{{label}} должно быть валидным уникальным идентификатором (uuid)',\n\n    // If there is no validation provided for an item, use this generic line.\n    fallback: '{{label}} не прошло валидацию'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-checkit/node_modules/checkit/lang/fr.js":"module.exports = {\n\n  accepted: ['on', 'yes', 1, '1', true, 'true'],\n\n  labels: {},\n\n  messages: {\n\n    // Custom Predicates\n    accepted: 'Le champ {{label}} doit être yes, on, true, ou 1',\n    email: 'Le champ {{label}} doit être une adresse mail valide',\n    exactLength: 'Le champ {{label}} doit avoir une longueur exacte de {{var_1}} caractères',\n    exists: 'Le champ {{label}} doit être défini',\n    required: 'Le champ {{label}} est requis',\n    minLength: 'Le champ {{label}} doit avoir une longueur minimum de {{var_1}} caractères',\n    maxLength: 'Le champ {{label}} ne doit pas dépasser {{var_1}} caractères',\n    lessThan: 'Le champ {{label}} doit être un nombre inférieur à {{var_1}}',\n    lessThanEqualTo: 'Le champ {{label}} doit être un nombre inférieur ou égal à {{var_1}}',\n    greaterThan: 'Le champ {{label}} doit être un nombre supérieur à {{var_1}}',\n    greaterThanEqualTo: 'Le champ {{label}} doit être un nombre supérieur ou égal à {{var_1}}',\n    between: 'Le champ {{label}} doit être un nombre compris entre {{var_1}} et {{var_2}}',\n    range: 'Le champ {{label}} doit être un nombre supérieur ou égal à {{var_1}} ou inférieur ou égal à {{var_2}}',\n    contains: 'Le champ {{label}} doit contenir {{var_1}}',\n    string: 'Le champ {{label}} doit être de type \"string\"',\n    numeric: 'Le champ {{label}} doit être une valeur numérique',\n    matchesField: 'Le champ {{label}} doit doit correspondre exactement à {{var_1}}',\n    different: 'Le champ {{label}} doit être différent de {{var_1}}',\n    isPlainObject: 'Le champ {{label}} doit être un \"plain object\"',\n\n    // Underscore Predicates\n    date: 'Le champ {{label}} doit être une date',\n    equal: 'Le champ {{label}} ne correspond pas à {{var_1}}',\n    'boolean': 'Le champ {{label}} doit être de type \"booléen\"',\n    empty: 'Le champ {{label}} doit être vide',\n    array: 'Le champ {{label}} doit être un tableau',\n    'null': 'Le champ {{label}} doit être \"null\"',\n    'NaN': 'Le champ {{label}} doit être \"NaN\"',\n    finite: 'Le champ {{label}} doit être un nombre fini',\n    'function': 'Le champ {{label}} doit être une fonction',\n    'arguments': 'Le champ {{label}} doit être un objet \"argument\" javascript',\n    regExp: 'Le champ {{label}} doit être un objet d\\'expression régulière javascript',\n\n    // Regex specific messages.\n    alpha: 'Le champ {{label}} ne doit contenir que des caractères alphabétiques',\n    alphaDash: 'Le champ {{label}} ne doit contenir que des caractères alpha-numériques, des underscores, ou des tirets',\n    alphaNumeric: 'Le champ {{label}} ne doit contenir que des caractères alpha-numériques',\n    alphaUnderscore: 'Le champ {{label}} ne doit contenir que des caractères alpha-numériques, des underscores, ou des tirets',\n    natural: 'Le champ {{label}} doit être un nombre positif',\n    naturalNonZero: 'Le champ {{label}} doit être un nombre supérieur à zéro',\n    integer: 'Le champ {{label}} doit être un entier',\n    ipv4: 'Le champ {{label}} doit être une chaîne IPv4 valide',\n    ipv6: 'Le champ {{label}} doit être une adresse IPv6 valide',\n    base64: 'Le champ {{label}} doit être une chaîne en base64',\n    luhn: 'Le champ {{label}} doit être un numéro de carte de crédit valide',\n    uuid: 'Le champ {{label}} doit être un numéro de série valide',\n\n    // If there is no validation provided for an item, use this generic line.\n    fallback: 'L\\'étape de validation du champ {{label}} a échoué'\n  }\n}\n"}